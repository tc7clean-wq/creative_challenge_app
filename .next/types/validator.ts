// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap, AppRouteHandlerRoutes } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"
import type { NextRequest } from 'next/server.js'

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type RouteHandlerConfig<Route extends AppRouteHandlerRoutes = AppRouteHandlerRoutes> = {
  GET?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  POST?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PUT?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  PATCH?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  DELETE?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  HEAD?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
  OPTIONS?: (request: NextRequest, context: { params: Promise<ParamMap[Route]> }) => Promise<Response | void> | Response | void
}


// Validate ../../app/admin/contests/page.tsx
{
  const handler = {} as typeof import("../../app/admin/contests/page.js")
  handler satisfies AppPageConfig<"/admin/contests">
}

// Validate ../../app/admin/create-contest/page.tsx
{
  const handler = {} as typeof import("../../app/admin/create-contest/page.js")
  handler satisfies AppPageConfig<"/admin/create-contest">
}

// Validate ../../app/admin/dashboard/page.tsx
{
  const handler = {} as typeof import("../../app/admin/dashboard/page.js")
  handler satisfies AppPageConfig<"/admin/dashboard">
}

// Validate ../../app/admin/jackpot/page.tsx
{
  const handler = {} as typeof import("../../app/admin/jackpot/page.js")
  handler satisfies AppPageConfig<"/admin/jackpot">
}

// Validate ../../app/admin/page.tsx
{
  const handler = {} as typeof import("../../app/admin/page.js")
  handler satisfies AppPageConfig<"/admin">
}

// Validate ../../app/admin/payouts/page.tsx
{
  const handler = {} as typeof import("../../app/admin/payouts/page.js")
  handler satisfies AppPageConfig<"/admin/payouts">
}

// Validate ../../app/admin/submissions/page.tsx
{
  const handler = {} as typeof import("../../app/admin/submissions/page.js")
  handler satisfies AppPageConfig<"/admin/submissions">
}

// Validate ../../app/admin/users/page.tsx
{
  const handler = {} as typeof import("../../app/admin/users/page.js")
  handler satisfies AppPageConfig<"/admin/users">
}

// Validate ../../app/auth/page.tsx
{
  const handler = {} as typeof import("../../app/auth/page.js")
  handler satisfies AppPageConfig<"/auth">
}

// Validate ../../app/contest/[id]/page.tsx
{
  const handler = {} as typeof import("../../app/contest/[id]/page.js")
  handler satisfies AppPageConfig<"/contest/[id]">
}

// Validate ../../app/contest/[id]/vote/page.tsx
{
  const handler = {} as typeof import("../../app/contest/[id]/vote/page.js")
  handler satisfies AppPageConfig<"/contest/[id]/vote">
}

// Validate ../../app/contests/page.tsx
{
  const handler = {} as typeof import("../../app/contests/page.js")
  handler satisfies AppPageConfig<"/contests">
}

// Validate ../../app/dashboard/page.tsx
{
  const handler = {} as typeof import("../../app/dashboard/page.js")
  handler satisfies AppPageConfig<"/dashboard">
}

// Validate ../../app/favorites/page.tsx
{
  const handler = {} as typeof import("../../app/favorites/page.js")
  handler satisfies AppPageConfig<"/favorites">
}

// Validate ../../app/gallery/page.tsx
{
  const handler = {} as typeof import("../../app/gallery/page.js")
  handler satisfies AppPageConfig<"/gallery">
}

// Validate ../../app/hall-of-fame/page.tsx
{
  const handler = {} as typeof import("../../app/hall-of-fame/page.js")
  handler satisfies AppPageConfig<"/hall-of-fame">
}

// Validate ../../app/leaderboard/page.tsx
{
  const handler = {} as typeof import("../../app/leaderboard/page.js")
  handler satisfies AppPageConfig<"/leaderboard">
}

// Validate ../../app/my-submissions/page.tsx
{
  const handler = {} as typeof import("../../app/my-submissions/page.js")
  handler satisfies AppPageConfig<"/my-submissions">
}

// Validate ../../app/page.tsx
{
  const handler = {} as typeof import("../../app/page.js")
  handler satisfies AppPageConfig<"/">
}

// Validate ../../app/profile/[username]/page.tsx
{
  const handler = {} as typeof import("../../app/profile/[username]/page.js")
  handler satisfies AppPageConfig<"/profile/[username]">
}

// Validate ../../app/settings/page.tsx
{
  const handler = {} as typeof import("../../app/settings/page.js")
  handler satisfies AppPageConfig<"/settings">
}

// Validate ../../app/submit/page.tsx
{
  const handler = {} as typeof import("../../app/submit/page.js")
  handler satisfies AppPageConfig<"/submit">
}

// Validate ../../app/api/admin/jackpot/draw-winner/route.ts
{
  const handler = {} as typeof import("../../app/api/admin/jackpot/draw-winner/route.js")
  handler satisfies RouteHandlerConfig<"/api/admin/jackpot/draw-winner">
}

// Validate ../../app/api/checkout/route.ts
{
  const handler = {} as typeof import("../../app/api/checkout/route.js")
  handler satisfies RouteHandlerConfig<"/api/checkout">
}

// Validate ../../app/api/comments/route.ts
{
  const handler = {} as typeof import("../../app/api/comments/route.js")
  handler satisfies RouteHandlerConfig<"/api/comments">
}

// Validate ../../app/api/competitions/process-results/route.ts
{
  const handler = {} as typeof import("../../app/api/competitions/process-results/route.js")
  handler satisfies RouteHandlerConfig<"/api/competitions/process-results">
}

// Validate ../../app/api/health/route.ts
{
  const handler = {} as typeof import("../../app/api/health/route.js")
  handler satisfies RouteHandlerConfig<"/api/health">
}

// Validate ../../app/api/likes/route.ts
{
  const handler = {} as typeof import("../../app/api/likes/route.js")
  handler satisfies RouteHandlerConfig<"/api/likes">
}

// Validate ../../app/api/votes/route.ts
{
  const handler = {} as typeof import("../../app/api/votes/route.js")
  handler satisfies RouteHandlerConfig<"/api/votes">
}

// Validate ../../app/auth/callback/route.ts
{
  const handler = {} as typeof import("../../app/auth/callback/route.js")
  handler satisfies RouteHandlerConfig<"/auth/callback">
}





// Validate ../../app/layout.tsx
{
  const handler = {} as typeof import("../../app/layout.js")
  handler satisfies LayoutConfig<"/">
}
